#!/usr/bin/env python
# encoding: utf-8
#| Copyright Inria July 2017
#| This project has received funding from the European Research Council (ERC) under
#| the European Union's Horizon 2020 research and innovation programme (grant
#| agreement No 637972) - see http://www.resibots.eu
#|
#| Contributor(s):
#|   - Konstantinos Chatzilygeroudis (konstantinos.chatzilygeroudis@inria.fr)
#|   - Rituraj Kaushik (rituraj.kaushik@inria.fr)
#|   - Roberto Rama (bertoski@gmail.com)
#|
#| This software is the implementation of the Black-DROPS algorithm, which is
#| a model-based policy search algorithm with the following main properties:
#|   - uses Gaussian processes (GPs) to model the dynamics of the robot/system
#|   - takes into account the uncertainty of the dynamical model when
#|                                                      searching for a policy
#|   - is data-efficient or sample-efficient; i.e., it requires very small
#|     interaction time with the system to find a working policy (e.g.,
#|     around 16-20 seconds to learn a policy for the cart-pole swing up task)
#|   - when several cores are available, it can be faster than analytical
#|                                                    approaches (e.g., PILCO)
#|   - it imposes no constraints on the type of the reward function (it can
#|                                                  also be learned from data)
#|   - it imposes no constraints on the type of the policy representation
#|     (any parameterized policy can be used --- e.g., dynamic movement
#|                                              primitives or neural networks)
#|
#| Main repository: http://github.com/resibots/blackdrops
#| Preprint: https://arxiv.org/abs/1703.07261
#|
#| This software is governed by the CeCILL-C license under French law and
#| abiding by the rules of distribution of free software.  You can  use,
#| modify and/ or redistribute the software under the terms of the CeCILL-C
#| license as circulated by CEA, CNRS and INRIA at the following URL
#| "http://www.cecill.info".
#|
#| As a counterpart to the access to the source code and  rights to copy,
#| modify and redistribute granted by the license, users are provided only
#| with a limited warranty  and the software's author,  the holder of the
#| economic rights,  and the successive licensors  have only  limited
#| liability.
#|
#| In this respect, the user's attention is drawn to the risks associated
#| with loading,  using,  modifying and/or developing or reproducing the
#| software by the user in light of its specific status of free software,
#| that may mean  that it is complicated to manipulate,  and  that  also
#| therefore means  that it is reserved for developers  and  experienced
#| professionals having in-depth computer knowledge. Users are therefore
#| encouraged to load and test the software's suitability as regards their
#| requirements in conditions enabling the security of their systems and/or
#| data to be ensured and,  more generally, to use and operate it in the
#| same conditions as regards security.
#|
#| The fact that you are presently reading this means that you have had
#| knowledge of the CeCILL-C license and that you accept its terms.
#|
import limbo
import glob
from waflib import Logs

def build(bld):
    dart_libs = 'TBB EIGEN BOOST LIMBO LIBCMAES NLOPT SFERES2 ROBOT_DART DART PTHREAD SIMPLE_NN '
    dart_libs_graphic = 'ROBOT_DART_GRAPHIC ' + bld.env['magnum_libs'] + dart_libs

    path = bld.path.abspath()[:-len('src/dart')] + 'res'

    if 'INCLUDES_ROBOT_DART' not in bld.get_env() or 'INCLUDES_DART' not in bld.get_env():
        Logs.pprint('YELLOW', 'Dart or robot_dart not found in your system. Will not build DART scenarios')
        return

    cxxflags = bld.get_env()['CXXFLAGS']

    # Find new targets
    files = glob.glob(bld.path.abspath()+"/*.cpp")
    new_targets = []
    for f in files:
        target_name = f[f.rfind('/')+1:-4]
        new_targets.append(target_name)

    # Compile new targets
    for target in new_targets:
        limbo.create_variants(bld,
                        source=target+'.cpp',
                        includes='. ../../../../src ../ ../../include',
                        target=target,
                        uselib=dart_libs,
                        uselib_local='limbo',
                        cxxflags = cxxflags + ['-DRESPATH="' + path + '"'],
                        variants = ['SIMU'])

        if bld.get_env()['BUILD_GRAPHIC'] == True:
            limbo.create_variants(bld,
                            source=target+'.cpp',
                            includes='. ../../../../src ../ ../../include',
                            target=target,
                            uselib=dart_libs_graphic,
                            uselib_local='limbo',
                            cxxflags = cxxflags + ['-DRESPATH="' + path + '"'],
                            variants = ['GRAPHIC'])
